import databases


items_dbview = databases.get_items_dbview()


header = "code,const,name,spoilername,category,subtype,j,flag,tier,shopoverride,price,throw,metal,longrange,twohanded,equip"
rows = header.split(",")

old_prices = bytes([
    # Offset 0x0007A450 to 0x0007A54F
    0x00, 0x23, 0x2D, 0x37, 0x82, 0x83, 0x9E, 0x0A, 0x16, 0x26, 0x46, 0x88,
    0x94, 0xB7, 0x88, 0x10, 0x30, 0x84, 0x82, 0x9E, 0xB2, 0x9E, 0x46, 0x78,
    0x82, 0x00, 0xD6, 0xFD, 0x8E, 0x9A, 0xE2, 0x85, 0x83, 0x86, 0x92, 0x06,
    0x87, 0x8B, 0x95, 0xD8, 0xFC, 0x86, 0xD8, 0x84, 0x87, 0x8B, 0xAC, 0xDD,
    0xEA, 0x85, 0x88, 0x83, 0x86, 0x8A, 0x90, 0x9F, 0x83, 0x8F, 0xAD, 0x83,
    0x85, 0x86, 0x8A, 0xFE, 0x94, 0xB2, 0x83, 0x8C, 0x30, 0x78, 0x00, 0xD0,
    0xDA, 0x88, 0x97, 0x08, 0xEF, 0x16, 0x46, 0x82, 0x83, 0x8A, 0x91, 0xAD,
    0x01, 0x02, 0x03, 0x03, 0x03, 0x04, 0x07, 0x0A, 0x0B, 0x0E, 0x04, 0x32,
    0x00, 0x0A, 0x14, 0x28, 0x46, 0x64, 0x7D, 0x8A, 0x8F, 0x94, 0x94, 0x99,
    0xA3, 0x0F, 0x24, 0x40, 0x62, 0x84, 0x83, 0x8A, 0x94, 0x9E, 0x9E, 0x0A,
    0x21, 0x84, 0x89, 0x94, 0xC1, 0x86, 0x89, 0x99, 0xAD, 0x3C, 0x6E, 0x82,
    0x83, 0x88, 0x91, 0x9E, 0xA3, 0xA8, 0xA8, 0xB2, 0xC1, 0x05, 0x14, 0x32,
    0x8B, 0x94, 0x9E, 0xBC, 0xC6, 0xBC, 0x07, 0x07, 0x84, 0x8E, 0xFF, 0xB2,
    0x0D, 0x1A, 0x34, 0x50, 0x83, 0x82, 0x85, 0xC1, 0x8A, 0x94, 0x94, 0x0A,
    0x32, 0x41, 0x8F, 0x94, 0xB2, 0x84, 0x9E, 0x88, 0x14, 0x85, 0x14, 0x85,
    0x14, 0x85, 0x88, 0x23, 0x83, 0x85, 0x82, 0x64, 0x82, 0x83, 0x83, 0x64,
    0x83, 0x83, 0x83, 0x83, 0x64, 0x85, 0x32, 0x88, 0x00, 0x85, 0x86, 0x1E,
    0x14, 0x32, 0x03, 0x0F, 0x83, 0x64, 0x85, 0xE4, 0x0A, 0x28, 0x06, 0x08,
    0x0A, 0x05, 0x03, 0x04, 0x0A, 0x85, 0x82, 0xA8, 0x99, 0x94, 0x0A, 0x32,
    0x0A, 0x12, 0x94, 0x94, 0xA3, 0x94, 0xB2, 0x05, 0x8A, 0x94, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00
])


def price_to_decimal(price):
    if price > 0x80:
        return (price & 0x7F) * 1000
    else:
        return price * 10


def compare_prices():
    for item_code in range(0x100):
        old_price = price_to_decimal(old_prices[item_code])
        item = items_dbview.find_one(lambda it: it.code == item_code)
        new_price = item.price
        # Checked Crystal Sword and Adamant armor on old seed. Nothing was over 127k
        # if old_price >= 126000:
        #     print(f"Price aliasing for {item.name}. May have a greater price.")
        if old_price == new_price:
            print(f"Same price: {item.name} @ {old_price}")
        else:
            print(f"DIFFERENT price: {item.name} was {old_price}, now {new_price}")


def dump_old_prices():
    with open("assets/db/items.csvdb", "r") as file:
        lines = [line.rstrip() for line in file]
    with open("items.csvdb", "w") as f:
        f.write(lines[0] + "\n")  # write header
        for item_code in range(0x100):
            old_price = price_to_decimal(old_prices[item_code])
            line = lines[item_code + 1]
            parts = line.split(",")
            price_field = parts[10]
            if len(price_field) > 0:
                parts[10] = str(old_price)
            f.write(",".join(parts) + "\n")


if __name__ == "__main__":
    dump_old_prices()
